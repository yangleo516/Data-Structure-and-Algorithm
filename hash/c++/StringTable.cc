// STRINGTABLE.CC
// A hash table mapping strings to their positions in the the pattern sequence
// You get to fill in the methods for this part.  Since we're passing around
// raw character strings, I've made the match length a parameter of the
// hash table so we don't have to keep figuring it out on each call.

#include <iostream>

#include "StringTable.h"

using namespace std;


//
// Create an empty table big enough to hold maxSize records.
//
StringTable::StringTable(int maxSize, int imatchLength)
  : matchLength{imatchLength}
{
}


//
// Insert a Record r into the table.  Return true if
// successful, false if the table is full.  You shouldn't ever
// get two insertions with the same key value, but you may
// simply return false if this happens.
//
bool StringTable::insert(Record *r)
{
  return true;
}


//
// Delete a Record r from the table.  Note that you'll have to
// find the record first unless you keep some extra info in
// the Record structure.
//
void StringTable::remove(Record *r)
{
}


//
// Find a record with a key matching the input.  Return the
// record if it exists, or nullptr if no matching record is found.
//
Record *StringTable::find(const char *key)
{
  return nullptr;
}


//////////////////////////////////////////////////////////

// Convert a string key into an integer that serves as input to hash
// functions.  This mapping is based on the idea of a linear-congruential
// pesudorandom number generator, in which successive values r_i are 
// generated by computing
//    r_i = ( A * r_(i-1) + B ) mod M
// A is a large prime number, while B is a small increment thrown in
// so that we don't just compute successive powers of A mod M.
//
// We modify the above generator by perturbing each r_i, adding in
// the ith character of the string and its offset, to alter the
// pseudorandom sequence.
//
int StringTable::toHashKey(const char *s) const
{
  int A = 1952786893;
  int B = 367257;
  int v = B;
  
  for (int j = 0; j < matchLength; j++)
    v = A * (v + int(s[j]) + j) + B;
  
  if (v < 0) v = -v;
  return v;

}


int StringTable::baseHash(int hashKey) const
{
  // Fill in your own hash function here
  return 0;
}


int StringTable::stepHash(int hashKey) const
{
  // Fill in your own hash function here
  return 0;
}


